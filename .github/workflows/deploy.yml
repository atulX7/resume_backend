name: Deploy FastAPI to Ubuntu EC2

on:
  workflow_dispatch:
#  push:
#    branches:
#      - main  # Change to your deployment branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # ✅ Step 1: Checkout repository
    - name: Checkout code
      uses: actions/checkout@v3

    # ✅ Step 2: Deploy to EC2
    - name: Deploy FastAPI Backend to EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🔄 Connecting to EC2 instance..."
          # ✅ Step 3.1: Ensure Backend Directory Exists
          echo "🔄 Checking if fastapi_app directory exists..."
          if [ -d "$HOME/fastapi_app/.git" ]; then
            echo "📥 Directory already exists, pulling latest changes..."
            cd $HOME/fastapi_app
            git reset --hard
            git pull origin main
          else
            echo "🛑 Directory missing or not a valid git repository. Cloning fresh..."
            rm -rf $HOME/fastapi_app  # Just in case there is a corrupted or non-git folder
            git clone https://github.com/atulX7/resume_backend.git $HOME/fastapi_app
          fi

          echo "✅ Code update complete."

          # ✅ Step 3.3: Install Python & Dependencies
          echo "🐍 Installing dependencies for pyenv..."
          sudo apt update -y
          sudo apt install -y build-essential curl libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev git

          echo "🐍 Installing pyenv..."
          curl https://pyenv.run | bash

          # Add pyenv initialization to the current shell
          echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
          echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
          echo 'eval "$(pyenv init --path)"' >> ~/.bashrc
          echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)"
          eval "$(pyenv virtualenv-init -)"

          echo "🐍 Installing Python 3.11 using pyenv..."
          pyenv install 3.11
          pyenv global 3.11
          echo "✅ Python version: $(python --version)"

          # ✅ Step 3.4: Install Poetry
          curl -sSL https://install.python-poetry.org | python3 -
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.profile  # Ensures it's available for non-interactive shells
          source ~/.bashrc || source ~/.profile  # Load the changes
          export PATH="$HOME/.local/bin:$PATH"  # Explicitly set the PATH in the current session
          poetry --version  # Verify Poetry installation

          
          # ✅ Step 3.5: Set Up Virtual Environment & Install Dependencies
          cd ~/fastapi_app
          poetry env use python3.11
          poetry install --no-root
          echo "✅ Dependencies installed."
          
          # Create logs directory for centralized logging
          mkdir -p logs
          chmod 755 logs
          chown -R $(whoami):$(whoami) logs
          ls -ld logs

          # ✅ Step 3.6: Create .env File with GitHub Secrets
          echo "📌 Creating .env file"
          cat <<EOF > .env
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION_NAME=${{ vars.AWS_REGION_NAME }}
          S3_BUCKET_NAME=${{ vars.S3_BUCKET_NAME }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          SMTP_SERVER=${{ vars.SMTP_SERVER }}
          SMTP_PORT=${{ vars.SMTP_PORT }}
          SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          ALLOW_ORIGINS=${{ vars.ALLOW_ORIGINS }}
          MOCK_DATA=${{ vars.MOCK_DATA }}
          CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}
          CELERY_BACKEND_URL=${{ secrets.CELERY_BACKEND_URL }}
          EOF
          echo "✅ .env file created."

          # ✅ Step 3.7: Apply Alembic Migrations
          echo "🛠️ Applying Alembic Migrations..."
          export DATABASE_URL=${{ secrets.DATABASE_URL }}
          poetry run alembic upgrade head
          echo "✅ Database migrations applied."

          # ✅ Step 3.7: Configure & Restart FastAPI with Systemd
          echo "🚀 Stopping any existing FastAPI process..."
          ps aux | grep "uvicorn" | grep -v "grep" | awk '{print $2}' | xargs -r kill -9
          echo "✅ Existing process stopped (if any)."
          # Find the process running on port 8000
          sudo lsof -i :8000
          # Kill the process using that port
          sudo kill -9 $(sudo lsof -t -i :8000)
          
          echo "🚀 Restarting FastAPI Application..."
          cd ~/fastapi_app
          nohup poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload > ~/fastapi_app/server.log 2>&1 &
          disown
          echo "✅ FastAPI Application started successfully."
          
          # Start Celery Worker with eventlet pool and centralized logging
          echo "🚀 Starting Celery Worker..."
#          ps aux | grep "celery -A app.celery_app.celery_app worker"
#          kill -9 <PID>
          nohup poetry run celery -A app.celery_app.celery_app worker --pool=eventlet --loglevel=info -Q mock_interview --logfile=logs/celery.log > logs/celery.out 2>&1 < /dev/null &
          disown
          echo "✅ Celery Worker started successfully."

          # Start Flower, binding to 0.0.0.0 so it’s accessible externally
          echo "🚀 Starting Flower..."
          nohup poetry run celery -A app.celery_app.celery_app flower --address=0.0.0.0 --port=5555 > logs/flower.log 2>&1 < /dev/null &
          disown
          echo "✅ Flower started successfully and should be accessible externally on port 5555."
                    
          echo "🌐 Configuring firewall rules..."
          sudo ufw allow 22/tcp  # Ensure SSH is not blocked
          sudo ufw allow 80/tcp   # Ensure NGINX is accessible
          sudo ufw allow 443/tcp # Ensure ssl is accessible
          sudo ufw allow 8000/tcp 
          sudo ufw allow 5555/tcp 
          echo "y" | sudo ufw enable
          echo "✅ Firewall configured."
          sleep 5
          exit 0

    # ✅ Step 4: Verify Deployment
    - name: Verify FastAPI Deployment
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🛠️ Checking FastAPI status..."
          sleep 5
          if curl -f http://localhost:8000/docs; then
            echo "✅ FastAPI is running!"
          else
            echo "❌ FastAPI failed to start! Check logs."
            cat ~/fastapi_app/server.log
            exit 1
          fi
  
